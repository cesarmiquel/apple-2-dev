; ACME 0.96.4
; 
; MAD EFFECT
; FRENCH TOUCH - 10/2019
;
; v0.11 - Released version
;
!cpu 6502
!convtab "a2txt.bin" ; 
!sl "lbl_main.txt"

!src "lbl_routine.txt"

; INCLUDE

           *= $D000 ; ORG = $D000 (RAM Langage Card)

; =====================================
VERTBLANK   = $C019
; -------------------------------------
FLOAD       = $FC00     ; routine Fast Load XTREME - MAIN
; =====================================
; PAGE ZERO => FIXED
bRefresh    = $01   ; byte REFRESH RATE ($56/50Hz | $06/60Hz)
bSLOT       = $02   ; numero SLOT * 0x10
IntL        = $03   ; L value for INT delay
IntH        = $04   ; H value for INT delay
Index       = $05
; --------
; FAST LOAD
PISDEP      = $0A   ; PISTE DE DEPART
SECDEP      = $0B   ; SECTEUR DE DEPART
BUFFER      = $0C   ; Buffer LOW+HIGH ; + $0D
TOTSEC      = $0E   ; TOTAL DES SECTEURS A CHARGER
CURTRK1     = $0F   ; piste de départ DRIVE 1 - A INITIALISER A ZERO pour le premier appel !

; INTx
save_A      = $10
save_X      = $11
save_Y      = $12

; ROUTINEs
Tmp1        = $13
Tmp2        = $14
value1      = $15   ; -> #>FUNC / #$C0
value2      = $16   ; -> #$20 / #$AD
counter     = $17
counter2    = $18
valgfx      = $19   ; -> #$20/#$40
phase       = $20

; decompLZ4
src1        = $30   ; +$31
src2        = $32   ; +$33
dest        = $34   ; +$35
lenL        = $36
lenH        = $37
token       = $38

; PLAYER
z80_A       = $70
z80_C       = $71
z80_B       = $72
z80_E       = $73
z80_D       = $74
z80_L       = $75
z80_H       = $76
z80_IX      = $77       ; + $78
z80_AP      = $79
z80_TP      = $7A       ; + $7B        
; --------
; =============================================================================
MAIN
!zone
TABLENOP = $1000

            ; Init Screen + some init
            STA $C000           ; 80STOREOFF
            STA $C008           ; zero Page = Main (+ $FXXX MAIN)

            LDA #192
            STA counter
            LDA #3
            STA counter2
            LDA #$AD            ; opcode for LDA
            STA value2
            LDA #$C0            ; high for "$C051"
            STA value1
            LDA #$00
            STA Index
            LDA #$40            ; HIRES1
            STA valgfx
            LDA #$03
            STA phase
; ------------------
            ; Chargement ROUTINE -> $4000(M) (COMP)
            LDA #$05
            STA PISDEP          ; piste 
            LDA #$40            ; chargement
            STA BUFFER+1        
            LDA #22
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; DECOMP ROUTINE -> $4000(M) - > $6000(M) 
            LDA #<($4000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($4000+16)
            STA src2+1
            LDA #<($6000)
            STA dest            
            LDA #>($6000)
            STA dest+1
            JSR DECOMPLZ4
            ; Chargement LORES  -> $1000(A) (COMP)
            STA $C005           ; write AUX Memory
            LDA #$07
            STA PISDEP          ; piste 
            LDA #$10            ; chargement
            STA BUFFER+1        
            LDA #16            
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; Chargement HIRES  -> $2000(A) (COMP)
            LDA #$08
            STA PISDEP          ; piste 
            LDA #$20            ; chargement
            STA BUFFER+1        
            LDA #69             
            STA TOTSEC      
            JSR FLOAD           ; chargement
            STA $C004           ; write MAIN Memory
            ; Patch DECOMP routine
            LDA #$03
            STA PATCHDECOMP+1   ; -> read AUX par defaut
            ; Decomp PIC1 -> HIRES PAGE2
            STA $C003           ; read AUX
            LDA #<($2000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($2000+16)
            STA src2+1
            LDA #<($4000)
            STA dest            
            LDA #>($4000)
            STA dest+1
            JSR DECOMPLZ4
            ; Decomp LORES1  -> LORES PAGE1/2
            LDA #<($1000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($1000+16)
            STA src2+1
            LDA #<($400)
            STA dest            
            LDA #>($400)
            STA dest+1
            JSR DECOMPLZ4
            STA $C002           ; read MAIN
            ; --------------
            ; GEN NOP Table
            LDX #$10
            ;LDY #00
            LDA #$EA            ; nop opcode
.mod2       STA TABLENOP,Y
            DEY
            BNE .mod2
            INC .mod2+2
            DEX
            BNE .mod2
            ; dirty fix if not enough NOP...
            LDA #$4C
            STA TABLENOP+$1000-3
            LDA #<TABLENOP
            STA TABLENOP+$1000-2
            LDA #>TABLENOP
            STA TABLENOP+$1000-1
; =============================================================================
Init_MB     ; init Mockingboard             
!zone
            ; PREMIER init MB (6522/AY1) / (6522/AY2)
            LDA #$FF
            STA $C403          ; DDRA1
            STA $C483
            LDA #$07
            STA $C402          ; DDRB1
            STA $C482

            ; clean REGISTER AY1 / AY2
            LDA #$00
            STA $C400
            STA $C480
            LDA #$04
            STA $C400
            STA $C480

            ; init sound
            LDA #<MUSIC
            STA z80_L
            LDA #>MUSIC
            STA z80_H
            JSR chip_song               ; init Song

; -------------------------------------
Init_INT    ; init interrupt
!zone       
            ; pour IIe 
            LDA #<INT_ROUT
            STA $FFFE       
            LDA #>INT_ROUT
            STA $FFFF
 
            SEI                         ; inhib
        
            ; préparation interruption - TIMER 1 6522 
            LDA #%01000000              ; Continuous Interrupt T1 / PB7 disabled (b76)
            STA $C40B                   ; Auxiliary Control Register

            LDA #%11000000              ; 
            STA $C40D                   ; interrupt flag register   (Time Out of Timer 1 Int)
            STA $C40E                   ; interrupt Enable register (Enable Timer 1)
; =================================================================================================
!align 255,0,$EA        
            ; PRECISE VBL detection - PAL
PAL
-           LDA VERTBLANK         
            BMI -                       ; wait fin display courant                                            
-           LDA VERTBLANK         
            BPL -                       ; wait fin VBL courant 

            ; Debut DISPLAY     
            LDA $EA                     ; 3

            ; 20279
-           LDY #255
            JSR WAIT65                  ; 255*65 = 16575
            LDY bRefresh                ; 56 (PAL) / 06 (NTSC)
            JSR WAIT65ZP                ; 56*65 = 3640 (PAL)
                                        ; = 20215

            LDY #00
            JSR WAIT57                  ; 57

            LDA VERTBLANK               ; 4 (lecture au 4ème cycle)
            BMI -                       ; 3
                                        ; = 20215+57+4+3 = 20279
            
            ; ici synchro précise => DEBUT DISPLAY
; -----------------------------------------------------------------
; WARNING: DISPLAY detected (VERTBLANK <0) from cycle #52 of last line (#311) of VBL
; so BMI not taken (LDA VERTBLANK occurs at cycle #51 of line 311)
                                                                            ; 2 cycles already passed during DISPLAY (bmi not taken)         
; line 311 / cycle 54
;                                       
            NOP : NOP : NOP : NOP  : LDA $EA                                ; +11     
;                                                                           ; = 65
; line 0 (display) / cycle 0

            ; on doit attendre 191+70+50= 311 lignes pour revenir cycle 0 dernière ligne VBL
            LDY #255
            JSR WAIT65
            LDY bRefresh                 ; 255+56=311 (PAL) / 255+06=261 (NTSC)
            JSR WAIT65ZP

; =================================================================================================           
            ; ici synchro précise => Dernière ligne VBL cycle 0

            ; define DELAY for INT1
            ; PAL delay = 65*(192+70+50) = 20280
            ; -2 (6522 takes 2 cycles to generate INT)
            ; = 20278 = $4F36
            
            LDX IntL                                                        ; 3
            LDY IntH                                                        ; 3            
            STX $C404                   ; T1C_1-Lower                       ; 4
            STY $C405                   ; T1C_1-High                        ; 4 (counter launched at the last cycle of STY)
                                        ; -> writing launch countdown       ; = [14]
; -------------------------------------
            CLI                         ; action!
            LDY #192+50                 ; pass display + beginning of VBL (PAL or NTSC)
            JSR WAIT65
            LDA $C056                   ; LORES

            JMP TABLENOP                ; waiting for INT to occur the first time
; =============================================================================
!align 255,0
INT_ROUT
!zone   
            ; 2-3 cycles (suivant où l'INT a lieu pendant les NOP)
            ; + 7 cycles (6502 INT Sequence)
            ; --------------------------------------------------------------------
            
            ; ici dernière ligne VBL -> cycles passed = (2/3) + 7 + [14]    ; = 23/24
           
            ; on attend la fin de la ligne de VBL
            PLA                                                             ; +4
            PLA                 ; pull addresses stacked by INT (NO RTI)    ; +4
            BIT $C404           ; Clear interrupt (T1_1CL)                  ; +4
            CLI                 ; restore INT (NO RTI)                      ; +2  
                                                                            ; = 37/38

; -------------------------------------------
; ====> BUGS APPLEWIN/AIPC + 6 cycles 
            ; NOP : NOP : NOP
; comment for REAL APPLE II PAL 
; -------------------------------------------

; WARNING: DISPLAY detected (VERTBLANK <0) from cycle #52 of last line (#311) of VBL
; so you need to go until cycle #52
            NOP : NOP : NOP : NOP : LDA $EA                                 ; +11
                                                                            ; = 48/49

            LDA VERTBLANK                                                   ; +4 (lecture dernier cycle)
                                                                            ; = 52/53

            BPL +               ; si BPL pris = dernier cycle VBL (52)          => + 3 cycles (->55)
+           ;                   ; si BPL non pris = premier cycle DISPLAY (53)  => + 2 cycles (->55)

; you need to finish the line #311
            NOP : NOP : NOP : NOP : CLV                                     ; +10
                                                                            ; = 65    
; =============================================================================
; synchronized CODE here - FIRST LINE DISPLAY - CYCLE #00
; =============================================================================

            JMP ROUTINE1            ; WARNING décalage 6 cycles (JMP/JMP) ->  
DEBUG
RET_VBL
            JSR chip_play           ; music! (one tick)

            JSR ROUTINE2
            LDA counter
            BNE .next
            DEC counter2
            BEQ +
.next       JMP TABLENOP            ; waiting for INT again (during NOP)
; change display...
+           ; reinit values
            LDA #3
            STA counter2
            LDA #192
            STA counter
            ; check at wich phase we are
            DEC phase
            BEQ .phase0             ; phase 0 -> beginning of animation to erase picture
            LDA phase
            CMP #02
            BEQ .phase2             ; phase 2 => beginning of displaying a picture
            CMP #01
            BEQ .phase1             ; phase 1 => picture fully displayed/beginning of decompressing next picture
            JMP TABLENOP ;          ; phase 3 => animation
            ; -------------------------
.phase0     ; phase 0 => beginning of animation to erase picture
            ; set values
            LDA #$C0                ; high of $C051
            STA value1
            LDA #$AD                ; opcode for LDA
            STA value2
            LDA #$04
            STA phase
            JMP TABLENOP
            ;--------------------------
.phase2     ; phase 2 => beginning of displaying a picture
            ; set values
            LDA #>FUNC              ; high of FUNC
            STA value1
            LDA #$20                ; opcode for JSR
            STA value2
            ; change HIRES1/2 into FUNC
            LDA modfunc+1
            EOR #($54 XOR $55)
            STA modfunc+1
            JMP TABLENOP
            ; -------------------------
.phase1     ; phase 1 => at this stage, one full picture is displayed
            ; change INT ROUTINE to ROUT2
            LDA $C057               ; Hires mode forced during decomp
.modpage    LDA $C055               ; page x forced during decomp
            LDA .modpage+1          ; prepare next page to display when back here
            EOR #($54 XOR $55)
            STA .modpage+1
            ; SEI/CLI not need (I guess) because INT never happens here 
            LDA #<INT_ROUT2
            STA $FFFE       
            LDA #>INT_ROUT2
            STA $FFFF
            ; from NOW, INT_ROUT2 is executed at each INT, we can decompress next picture with music
            LDA valgfx
            EOR #($20 XOR $40)
            STA valgfx
            STA dest+1
            LDA #00 
            STA dest
            LDX Index
            INX
            CPX #MAXPIC
            BNE +
            LDX #00
+           STX Index
            LDA TablePicLz4H,X
            STA src2+1
            LDA TablePicLz4L,X
            STA src2
            STA $C003           ; read AUX
            JSR DECOMPLZ4
            ; decomp LORES       
            LDX Index
            LDA TableLORLz4H,X
            STA src2+1
            LDA TableLORLz4L,X
            STA src2
            LDA #00 
            STA dest
            LDA #$04
            STA dest+1
            JSR DECOMPLZ4
            STA $C002           ; read MAIN again
            ; change INT ROUTINE to ROUT1 again
            SEI
            LDA #<INT_ROUT
            STA $FFFE       
            LDA #>INT_ROUT
            STA $FFFF
            CLI
            JMP .phase0
; =============================================================================
INT_ROUT2   ; simple routine used during FULL PICTURE DISPLAYED/DECOMP NEXT IMAGE
            STA save_A			; on sauve A                                
		    STX save_X		    ; on sauve X                                
		    STY save_Y			; on sauve Y    

            JSR chip_play       ; music! (one tick)

            BIT $C404           ; Clears interrupt (T1_1CL) -> not needed, done earlier (twice!)
		    LDY save_Y          ; on récup Y
		    LDX save_X          ; on récup X
		    LDA save_A			; on récup A
		    RTI					; sortie INT                      
; =============================================================================
!align 255,0
WAIT65              ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 8 cycles obligatoire -> LDY #xx / JSR WAIT65)
WAIT65ZP = * + 1    ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 9 cycles obligatoire -> LDY ZP / JSR WAIT65Z)
!zone           
		    LDA $EA     ; 3 (dummy)  -> on arrive sur NOP si JSR WAIT65Z
WAIT62      ; = attend 1*62 cycles exactement (JSR/RTS compris -> LDY #01 / JSR WAIT63)
            DEY			; 2					
		    BEQ .S1	    ; 3/2			
                  
.WL1 	    LDX #$0B				            
.WL2 	    DEX							
		    BNE .WL2	; 2 + (2+3)*10 + 2 + 2 = 56															
                      
		    NOP			; 2					
		    NOP			; 2					
		    DEY			; 2					
		    BNE .WL1	; (56+2+2+2+3)*(Y-2) + 56 + 2 + 2 + 2 + 2 = 65*Y - 2*65 + 64 = 65*Y - 66				

WAIT59      ; = attend 1*59 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT59)											                      
		    LDX #$08					
.WL3 	    DEX							
		    BNE .WL3	; 2 + (2+3)*7 + 2 + 2 = 41					
                							
		    NOP			; 2					
		    NOP			; 2					
		    RTS			; 6

                        ; WAIT62 = 2 + 2 + (65-66) + 41 + 2 + 2 + 6 + (8) = 62 
                        ; WAIT65 = 3 + 2 + 2 + (65*Y-66) + 41 + 2 + 2 + 6 + (8) = 65*Y
                        ; WAIT59 = 41 + 2 + 2 + 6 + (8) = 59 					

WAIT57      ; = attend 1*57 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT57)											         
.S1	 	    NOP         ; 2
WAIT55      ; = attend 1*55 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT55)	
            LDX #08					
                      
.WL4 	    DEX							
		    BNE .WL4    ; 2 + (2+3)*7 + 2 + 2 = 41					
		    RTS         ; 6
                        ; = 49

                        ; WAIT65 = 3 + 2 + 3 + 49 + (8) = 65
                        ; WAIT62 = 2 + 3 + 49 + (8) = 62
                        ; WAIT57 = 49 + (8) = 57
                        ; WAIT55 = 47 + (8) = 55
; =============================================================================
MAXPIC = 9
TablePicLz4L    !byte <($2000+16),<($2700+16),<($2E00+16),<($3700+16),<($3F00+16),<($4600+16),<($4D00+16),<($5500+16),<($5B00+16)
TablePicLz4H    !byte >($2000+16),>($2700+16),>($2E00+16),>($3700+16),>($3F00+16),>($4600+16),>($4D00+16),>($5500+16),>($5B00+16)
TableLORLz4L    !byte <($1000+16),<($1200+16),<($1400+16),<($1600+16),<($1800+16),<($1A00+16),<($1C00+16),<($1E00+16),<($1600+16)
TableLORLz4H    !byte >($1000+16),>($1200+16),>($1400+16),>($1600+16),>($1800+16),>($1A00+16),>($1C00+16),>($1E00+16),>($1600+16)
; =============================================================================
DECOMPLZ4
!zone
; routine de décompression LZ4
; code: XXL and FOX (from Atari Scene)
; small modification: FT

; init routine
					LDY #0
					STY lenH
					STY lenL	
; -------------------------------------
; décomp LZ4 routine
; -------------------------------------
.BP
             		jsr   	.GET_BYTE                  
                  	sta    	token
               		lsr
               		lsr
               		lsr
               		lsr
                  	beq    	.read_offset                     ; there is no literal
                  	cmp    	#$0f
                  	jsr    	.getLength
                  	
.b_literals         jsr    	.GET_BYTE
                  	jsr    	.store
                  	bne    	.b_literals
                  	
.read_offset       	jsr    	.GET_BYTE
                  	tax
                  	sec
                  	eor    	#$ff
                  	adc    	dest
                  	sta    	src1
                  	txa
                  	php							
                  	jsr    	.GET_BYTE
                  	plp
                  	bne    	.not_done
                  	tax
                  	beq    	.unlz4_done
.not_done          	eor    	#$ff
                  	adc    	dest+1
                  	sta    	src1+1
                  	; c=1
		            lda    	token
                  	and    	#$0f
                  	adc    	#$03                            ; 3+1=4
                  	cmp    	#$13
                  	jsr    	.getLength

; modification: switch avant et après le LDA
.b1                 STA $C002           ; read MAIN (pour la relecture des data déjà décompressées)
                    lda     (src1),Y
PATCHDECOMP         STA $C002           ; on repasse en mode par default
                    
                  	INC 	src1
                  	BNE 	.s1
                  	INC 	src1+1
.s1                 jsr    	.store
                  	bne    	.b1
                  	jmp		.BP                  

.store             	sta    	(dest),Y
                  	INC		dest
                  	BNE 	.s2
 					INC 	dest+1                 	
.s2                 dec    	lenL
                  	bne    	.unlz4_done
                  	dec    	lenH
.unlz4_done        	rts

.getLength_next    	jsr    	.GET_BYTE
                  	tax
                  	clc
	                adc    	lenL
                  	bcc    	.s3
                  	inc    	lenH
.s3   	            inx

.getLength         	sta    	lenL
                  	beq    	.getLength_next
                  	tax
                  	beq    	.s4
                  	inc    	lenH
.s4 	            rts

		
.GET_BYTE			LDA		(src2),Y
					INC 	src2		
					BEQ 	.s5
					RTS					
.s5					INC 	src2+1			
					RTS
; =============================================================================
PLAYER_CHP
!src "player_CHIPNSFX.a"

!align 255,0            ; data music must be aligned... BUG?!
MUSIC
!src "chp7.a"

ENDADD