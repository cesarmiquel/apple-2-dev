; ACME 0.96.4
!cpu 6502
; ========================================================================
; CHIPNSFX player for Amstrad CPC, ZX Spectrum 128 and other Z80 systems
; featuring AY-3-8910, YM2149 or similar 3-channel soundwave generators.

; Originally written by Cesar Nicolas-Gonzalez / CNGSOFT in 2003 for the
; 4-kb CNGTRO#1; then rewritten since 2017-03-07 until 2017-05-14 as part
; of the CHIPNSFX tracker; many patches, bugfixes and improvements since!
; ========================================================================
; Adaptation/Translation from CHIPNSFX version 20190731
; ========================================================================
; 6502 version by GROUiK for FRENCH TOUCH
; [APPLE II version]
;
; v0.12: Fixed an issue with Arpeggio!
; ========================================================================
; CHIPNSFX_FLAG = %00000000 
; REMOVED => +1(? 1.78:1.00 MHz)                            / 1.00 Mhz
; REMOVED => +2(? 6:3 ch)                                   / 3 ch
; REMOVED => +4 (ABRIDGED: disable post-V.1 additions)      / !ABRIDGED
; REMOVED => +8 (NOISELESS: remove all noise handling)      / !NOISELESS
; REMOVED => +16 (SLIDELESS: rmv. portamento+glissando)     / !SLIDELESS
; REMOVED => +32 (UNLOOPED: remove all loop logic+data)     / UNLOOPED -> songs must be generated with the -R command line option.
; REMOVED => +64 (TEMPOLESS: simpler timing, no tempos)     / !TEMPOLESS
; REMOVED => +128 (PRECALC'D notes, faster but longer)      / PRECALC
;
; out file must be generated from CHP with -R option only!
; e.g.: CHIPNSFX.EXE -R SLAPFITF.CHP out.a
; ------------------------------------------------------------------------
VIA_ORA     = $C401         ; change this if MB is in slot X -> $CX01
VIA_ORA2    = $C481         ; change this if MB is in slot X -> $CX81
VIA_PCR     = $C400         ; change this if MB is in slot X -> $CX00
VIA_PCR2    = $C480         ; change this if MB is in slot X -> $CX80
F_SET_REG   = $07
F_INACTIVE  = $04
F_WRT_DATA  = $06

chipnsfx      = chip_base           ;EXTERNAL chipnsfx =target location or =chip_base

; The data format uses the following 8-bit values:

CHIPNSFX_SIZE = $6F

; $00..$6F: NOTES C-0..B#8, SFX, "BRAKES" AND REST
; $70..$DF: NOTE SIZE ($70=$6F+1..$EF=$6F+128)
; functions:
; $00F0: END!
; $00F1: RETURN
; $00F2,LL,HH: LONG CALL/JUMP (HL=target-$-2)
; $00F3,LL: SHORT CALL (L=target-$-2, 0..255)
; $00F4,LL: LOOP (1..255 #.TIMES; 0 LOOP END)
; $00F5,LL: SET TEMPO (1..256)
; $00F6,LL: SET TRANS (-128..+127)
; $00F7,LL: ADD TRANS (-128..+127)
; $00F8,LL: SET AMPL. (0:MUTE; 1..255)
; $00F9,LL: ADD AMPL. (-128..+127)
; $00FA,LL: SET NOISE (0:NONE; 1..255)
; $00FB,LL: ADD NOISE (-128..+127)
; $00FC,HL: SET ARPEGGIO: 00 DISABLE SFX; H0 ARPEGGIO 0+H; HL ARPEGGIO 0+H+L
; $00FD,HL: SET VIBRATO: 00 PORTAMENTO; 0L GLISSANDO L; HL VIBRATO 0 +L 0 -L @H
; $00FE,LL: SET AMPL. ENV. (-128..+127)
; $00FF,LL: SET NOISE ENV. (-128..+127)

CHIPNSFX_POS_L =  0 ; POS.L
CHIPNSFX_POS_H =  1 ; POS.H
CHIPNSFX_BACKL =  2 ; POS.L
CHIPNSFX_BACKH =  3 ; POS.H
CHIPNSFX_NSIZE =  4 ; 1                 ; <- WARNING BUG in original z80 player (typo "CHIPNSFX_NTIME")
CHIPNSFX_CSIZE = CHIPNSFX_NSIZE+1 ; 1
CHIPNSFX_NTIME = CHIPNSFX_NSIZE+2 ; 1
CHIPNSFX_CTIME = CHIPNSFX_NTIME+1 ; 1
CHIPNSFX_NAMPL = CHIPNSFX_NTIME+2 ; $FF
CHIPNSFX_CAMPL = CHIPNSFX_NAMPL+1 ; 0
CHIPNSFX_NNOTE = CHIPNSFX_NAMPL+2 ; 0
CHIPNSFX_CNOTE = CHIPNSFX_NAMPL+3 ; 0
CHIPNSFX_FREQL = CHIPNSFX_NAMPL+4 ; 0
CHIPNSFX_FREQH = CHIPNSFX_FREQL+1 ; 0 (in fact WAVELENGTH rather than FREQUENCY)
CHIPNSFX_ENV_A = CHIPNSFX_FREQL+2 ; 0
CHIPNSFX_ENV_Z = CHIPNSFX_ENV_A+1
CHIPNSFX_ENT_A = CHIPNSFX_ENV_A+2 ; 0
CHIPNSFX_ENT_L = CHIPNSFX_ENT_A+1 ; 0
CHIPNSFX_ENT_H = CHIPNSFX_ENT_A+2 ; 0
CHIPNSFX_NOISE = CHIPNSFX_ENT_A+3 ; 0
CHIPNSFX_ENV_N = CHIPNSFX_ENT_A+4 ; 0
CHIPNSFX_ONOTE = CHIPNSFX_ENT_A+5 ; ALWAYS LAST BYTE!
CHIPNSFX_BYTES = CHIPNSFX_ONOTE+1
CHIPNSFX_TOTAL = CHIPNSFX_BYTES*3 ; 3x(music/sound)
; =============================================================================
chip_base ; base reference

; wipe all channels and stop hardware
chip_stop  
            LDA #<(chipnsfx_bss+CHIPNSFX_POS_L) 
            STA z80_L                           
            LDA #>(chipnsfx_bss+CHIPNSFX_POS_L)
            STA z80_H
            LDA #<(CHIPNSFX_BYTES-1)           
            STA z80_E
            LDA #>(CHIPNSFX_BYTES-1)
            STA z80_D
 
            LDA #<(7+$0303)                     
            STA z80_C
            LDA #>(7+$0303)
            STA z80_B

            LDX #00                             
            LDY #00

chip_stop1 
            LDA z80_C                           ; (x = 0)
            JSR writepsg                        
            LDA #00
            STA (z80_L),Y                      
            INC z80_L                           
            BNE +
            INC z80_H
+           STA (z80_L),Y                       
            CLC                                 
            LDA z80_L
            ADC z80_E
            STA z80_L
            LDA z80_H
            ADC z80_D
            STA z80_H
            DEC z80_C                           
            DEC z80_B
            BNE chip_stop1                      
; chip_chan will clean up later
            RTS                                 
; -----------------------------------------------------------------------------
; setup all tracks at once
chip_song  
            LDA #$00                           
            STA z80_A
            JSR chip_song1                      
            JSR chip_song1                      
chip_song1
            LDY #00
            LDA (z80_L),Y                       
            STA z80_E
            INC z80_L                          
            BNE +
            INC z80_H
+           LDA (z80_L), Y                      
            STA z80_D
            INC z80_L                           
            BNE +
            INC z80_H
+                               
; setup one track
chip_chan 
 
            LDA z80_A
            STA z80_C                           
            JSR chip_resmixer                   
            LDA z80_C                           
            STA z80_A
            INC z80_A                           
            
            LDA z80_A
            STA z80_AP                          
                                                
            LDA #<(chipnsfx_bss-CHIPNSFX_BYTES)
            STA z80_TP
            LDA #>(chipnsfx_bss-CHIPNSFX_BYTES)
            STA z80_TP+1
            LDA #<(CHIPNSFX_BYTES)              
            STA z80_C
            LDA #>(CHIPNSFX_BYTES)
            STA z80_B
-           CLC                                 
            LDA z80_TP
            ADC z80_C
            STA z80_TP
            LDA z80_TP+1
            ADC z80_B
            STA z80_TP+1
            DEC z80_A                           
            BNE -                               
            LDX #(CHIPNSFX_NSIZE/2)             
            LDY #00
-           LDA z80_E                           
            STA (z80_TP),Y
            INC z80_TP                          
            BNE +
            INC z80_TP+1
+           LDA z80_D                          
            STA (z80_TP),Y
            INC z80_TP                         
            BNE +
            INC z80_TP+1
+           DEX
            BNE -                               
            INC z80_A                           
 
            LDX #04                             
            LDA z80_A                           
-           STA (z80_TP),Y                      
            INC z80_TP                          
            BNE +
            INC z80_TP+1
+           DEX
            BNE -                              

            LDA #$FF                            
            STA (z80_TP),Y
            LDA #00                             
            STA z80_A
            LDX #(CHIPNSFX_BYTES-CHIPNSFX_CAMPL)
-           INC z80_TP                          
            BNE +
            INC z80_TP+1
+           LDA z80_A
            STA (z80_TP), Y                     
            DEX                                 
            BNE -
                                                
            LDA z80_AP                          
            STA z80_A
            RTS
; =============================================================================
; play one frame
chip_play 

chip_addnoise = *+1
            LDA #00                             
            STA z80_L

            LDA chip_ld_noise                    
            JSR chip_addsubl                    
            STA chip_ld_noise

            LDA #<(256-1)                       
            STA z80_C
            LDA #>(256-1)  
            STA z80_B                          

            LDA #<chipnsfx_bss                  
            STA z80_IX
            LDA #>chipnsfx_bss
            STA z80_IX+1
            JSR chip_both                       
            JSR chip_both                       
            JSR chip_both                       
chip_ld_noise = *+1
            LDA #00                             
            STA z80_A
chip_cp_noise = *+1
            CMP #00                             

            BNE +                               
            RTS
+
            STA chip_cp_noise                   
            LSR                                 
            LSR                                 
            LSR                                 
            TAX                                 
            LDA #06                             
            JMP writepsg                        
; ------------------------------------- 
chip_both ; IX=CHANNEL BYTES,B=0,C=-1..1
            INC z80_C                           
            LDY #CHIPNSFX_POS_L                 
            LDA (z80_IX),Y
            STA z80_E
            LDY #CHIPNSFX_POS_H                 
            LDA (z80_IX),Y
            STA z80_D
            ORA z80_E                           ; empty channel?
            BNE +
            JMP chip_exit                       
+
            LDY #CHIPNSFX_CTIME                 
            LDA (z80_IX),Y
            SEC
            SBC #01
            STA (z80_IX),Y
            BNE chip_nextnz                     
            LDY #CHIPNSFX_NTIME                 
            LDA (z80_IX),Y
            LDY #CHIPNSFX_CTIME
            STA (z80_IX),Y                      

            LDY #CHIPNSFX_CSIZE                 
            LDA (z80_IX),Y
            SEC
            SBC #01
            STA (z80_IX),Y
chip_nextnz
            BEQ +
            JMP chip_next                       
+
; ------------------------------------- 
chip_read 
            LDY #00                             ; read next command
            LDA (z80_E),Y
            INC z80_E                           
            BNE +
            INC z80_D
+           CMP #$F0                            ; $F0-$FF: special codes
            BCC chip_func_                      
            BEQ chip_func0                     

            ; SEC                               ; c = 1 here
            SBC #$F0                            ; sbc $F0 -> code = $00-$0F
            TAX
            LDA TableFuncL,X
            STA mod1+1
            LDA TableFuncH,X
            STA mod1+2  

mod1        JSR $ACAC                          
            JMP chip_read                       
; ------------------------------------- 
chip_func_
            SEC                                 ; $00-$6F: note
            SBC #$6F
            BCC chip_note                       
            BEQ chip_note                       
            LDY #CHIPNSFX_NSIZE
            STA (z80_IX),Y                      ; $70-$EF: size
            JMP chip_read                       

chip_func0 ; $00F0: END!
            JSR chip_resmixer                   
            LDA #00                             
            LDY #CHIPNSFX_POS_L
            STA (z80_IX),Y                      
            LDY #CHIPNSFX_POS_H                 
            STA (z80_IX),Y
            JMP chip_exit                       
; ------------------------------------- 
chip_note ; create a note. A=0 = REST,A<0 = NOTE
            STA z80_A                          
            LDA z80_E                           
            LDY #CHIPNSFX_POS_L
            STA (z80_IX),Y
            LDA z80_D                           
            LDY #CHIPNSFX_POS_H                 
            STA (z80_IX),Y
            LDY #CHIPNSFX_NSIZE
            LDA (z80_IX),Y
            STA z80_D                           
            LDY #CHIPNSFX_CSIZE
            STA (z80_IX),Y                     
            LDA z80_A                          
            BEQ chip_rest                       ; patch 20180518: "^^^", two-byte optimisation
 
            INC z80_A                           
            BEQ chip_next                       
            LDA z80_A
            CMP #(1-3)                          
            BEQ chip_note1                      
            BCS chip_nextx                      ; patch 20180920: "===", "brake": toggles ENV_A and extends note (INV)
            CLC                                 
            ADC #($6F-1)
            CLC
            LDY #CHIPNSFX_NNOTE                 
            ADC (z80_IX),Y
chip_note1
            LDY #CHIPNSFX_CNOTE                 
            STA (z80_IX),Y
            STA z80_E                           
            LDY #CHIPNSFX_ENT_A
    	    LDA (z80_IX),Y                      
            AND #%00110000                      ; 00:NOTHING; 10: ARPEGGIO; 01:PORTAMENTO; 11:VIBRATO
            STA (z80_IX),Y                      
            CMP #%00010000                      ; portamento?
            BEQ chip_note_                      

            LDY #CHIPNSFX_NOISE                 
            LDA (z80_IX),Y                     
            STA z80_A                           
            BEQ chip_note0                      ; disable noise
            STA chip_ld_noise                   
            LDY #CHIPNSFX_ENV_N                 ; patch 20170913: no clashing
            LDA (z80_IX),Y
            CMP #$80                            
            BEQ +                               ; patch 20170916: special case
            STA chip_addnoise                   
+           STY z80_A                           

chip_note0 
            JSR chip_zf_mixer                   
            LDY #CHIPNSFX_ENV_Z                 
            LDA #00                             
            STA (z80_IX),Y
            LDY #CHIPNSFX_NAMPL                 
            LDA (z80_IX),Y                      
            TAX                                 
            ; --- added because of z flag - double of chip_rest
            LDY #CHIPNSFX_CAMPL
            STA (z80_IX),Y                      
            TXA                                 
            BNE chip_note_
            JMP chip_exit                       
            ; ----------------------------
chip_rest 
            LDY #CHIPNSFX_CAMPL
            STA (z80_IX),Y                                           
            JMP chip_exit                       

chip_note_ 
            LDA z80_E                           
            JMP chip_calc                       

chip_nextx 
            LDY #CHIPNSFX_ENV_Z                 
            LDA (z80_IX),Y
            CLC
            ADC #01
            STA (z80_IX),Y

chip_next ; handle AMPL. and FREQ. envelopes
            LDY #CHIPNSFX_CAMPL                 
            LDA (z80_IX),Y                      
            TAX                                  
            BNE +
            JMP chip_exit                      
+
            LDY #CHIPNSFX_ENV_Z                 ; patch 20180920: "brake" on?
            LDA (z80_IX),Y
            AND #%00000001                      
            BNE chip_next1                      

            LDY #CHIPNSFX_ENV_A                 ; patch 20170717: shorter, more general tremolo/envelope handling
            LDA (z80_IX),Y
            STA z80_L                                              
            SEC                                
            SBC #($80-$20)
            CMP #($20+$20)                      
            BCS chip_next0                      
            ASL                                 
            ASL                                 
            ASL                                 
            STA z80_L                          
            LDY #CHIPNSFX_NAMPL                 
            LDA (z80_IX),Y
            BCC chip_next_                      ; TREMOLO or ENVELOPE?
            CMP z80_H                          
            BNE chip_next__                     
            JMP chip_next_                      

chip_next0 
            TXA                                

chip_next_ 
            JSR  chip_addsubl                   

chip_next__ 
            LDY #CHIPNSFX_CAMPL                 
            STA (z80_IX),Y

chip_next1
            LDY #CHIPNSFX_ENV_N                 ; patch 20170910: special case $80
            LDA (z80_IX),Y
            STA z80_A
            CMP #$80                             
            BNE +
            JSR chip_resmixer                   
+           LDY #CHIPNSFX_ONOTE                 
            LDA (z80_IX),Y
            BPL +                               
            JMP chip_done
+           LDY #CHIPNSFX_ENT_A                 
            LDA (z80_IX),Y                      
            STA z80_A
chip_donez 
            BNE +
            JMP chip_done                       
+           LDY #CHIPNSFX_ENT_L                 
            LDA (z80_IX),Y
            STA z80_E
            LDY #CHIPNSFX_ENT_H                 
            LDA (z80_IX),Y
            STA z80_D
            LDA #%00010000                      
            BIT z80_A
            BNE +
            JMP chip_arpeggio                  
+           LDY #CHIPNSFX_FREQL                 
            LDA (z80_IX),Y
            STA z80_L
            LDY #CHIPNSFX_FREQH                 
            LDA (z80_IX),Y
            STA z80_H
            LDA #%00100000                      
            BIT z80_A
            BNE chip_vibrato                    

chip_portamento ; PORTAMENTO
            LDA z80_H                           
            CMP z80_D                           
            BNE chip_portamento_                
            LDA z80_L                           
            CMP z80_E                           
            BNE chip_portamento_                
            JMP chip_done        
chip_portamento_ 
            CLC                                 
            LDA z80_L
            ADC z80_E
            STA z80_L
            LDA z80_H
            ADC z80_D
            STA z80_H
            LSR z80_H                           
            ROR z80_L                           
            JMP chip_freq                       

chip_vibrato ; VIBRATO
            LDA z80_D
            BEQ chip_glissando                  
            INC z80_A                           
            LDY #CHIPNSFX_ENT_A
            LDA z80_A
            STA (z80_IX),Y                      
            AND #$0F                            
            CMP z80_D                           

chip_donenz 
            BEQ +
            JMP chip_done                       ; patch 20170727: cfr. infra
+
            LDY #CHIPNSFX_ENT_A
            EOR (z80_IX),Y                      
            CLC                                 ; add $40 ; $40(+),$80(-),$C0(-),$00(+)
            ADC #$40
            STA (z80_IX),Y                      
            STA z80_A                           

chip_glissando 
            LDA #%00001000                      ; patch 20170930: bit 3 on: signed vibrato
            BIT z80_E
            BEQ +                               
            LDA z80_A                           
            EOR #$FF
            STA z80_A
+           LDA z80_A                           ; patch 20190221: new scale: 1-2-4-8-16-32-64
            STA z80_D                           
            LDA z80_E                           ; patch 20190608: value 0: slow glissando
            AND #$07                            
            STA z80_A
            BNE chip_glissando_                 
            INC z80_A                           
            LDY #CHIPNSFX_ENT_A                 ; cancel vibrato
            LDA #%00110000
            STA (z80_IX),Y
chip_glissando_ 
            LDA z80_A                           
            EOR #$07
            ASL                                 ; x2
            ASL                                 ; x2 => x4 (4 bytes for each occurence)
            STA chip_vibrato0-1                 
            LDA z80_D                           
            STA z80_A
            LDA #00                             
            STA z80_D
            LDA z80_H                           
            STA z80_E
            INC z80_E                           
                                                
            CLC
            BCC chip_vibrato0                   
chip_vibrato0 ; DE = DELTA
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            ASL z80_E : ROL z80_D               
            
            LSR z80_D                           
            ROR z80_E                           
                                                
            ASL z80_A                           
            BCS chip_vibrato1                   
            SEC                                 ; CF must be zero!
            LDA z80_L                           
		    SBC z80_E
		    STA z80_L
		    LDA z80_H
		    SBC z80_D
		    STA z80_H
            JMP chip_freq                       

chip_vibrato1 
            CLC                                 
            LDA z80_L
            ADC z80_E
            STA z80_L
            LDA z80_H
            ADC z80_D
            STA z80_H
            JMP chip_freq                       

chip_arpeggio ; ARPEGGIO
            LDA z80_A                           
-           CLC
            ADC #$40
            BCS -                               ; $40(H):$80(L):$C0(0)
            LDY #CHIPNSFX_ENT_A                 
            STA (z80_IX),Y
            CLC                 
            ADC #($100-($80+%00100000))         ; add $100-($80+%00100000)
            TAX                                 
            LDA z80_D                           
            STA z80_A
            BCC chip_arpeggio0                  
            LDA #00                             
            STA z80_A
            TXA                                 
            BNE chip_arpeggio0                  
            LDA z80_A                           
            ORA z80_E
            STA z80_A                           
            BNE chip_arpeggio0                 
            LDY #CHIPNSFX_ENT_A                 
            LDA #(0+%00100000)
            STA (z80_IX),Y

chip_arpeggio0 ; patch 20170727: special cases $FX and $XF
            LDA z80_A
            CMP #13                             
            BCC chip_arpeggio1                  
            LSR                                 
            LDX #24                             ; patch 20171121: D=+24
            ; --- added because of z flag
            LDA z80_A
            EOR #13                             
            STX z80_A
            ; ---------------------------
            BEQ chip_arpeggio1                  
            LDA #(-12)                          ; special case: F=-12
            BCS +                               
            ASL                                 ; patch 20171118: E=-24
+           STA z80_A
            LDY #CHIPNSFX_ENT_A                 ; 0HLLLL/0HL0HL...
            LDA #($40+%00100000)
            STA (z80_IX),Y

chip_arpeggio1 
            LDY #CHIPNSFX_CNOTE                 
            LDA z80_A
            CLC
            ADC (z80_IX),Y
            LDY #CHIPNSFX_ONOTE                 
            CMP (z80_IX),Y
            BEQ chip_done                       

chip_calc ; A=NOTE,B=0; AF!,B=0,HL=FREQ.
            LDY #CHIPNSFX_ONOTE
            STA (z80_IX),Y                     
            LDX #00                             
            STX z80_H
            STX z80_L                           
            CMP #(12*9)                         ; "C-9"; only 9 octaves are precalculated
            BCS chip_calc0                      
            ASL                                 
            CLC                                 
            ADC #<chip_calcs                    
            STA z80_L                          
            LDA #>chip_calcs                    
            ADC #00
            STA z80_H                          
            LDY #00                            
            LDA (z80_L),Y
            TAX
            INC z80_L                                          
            BNE +
            INC z80_H
+           LDA (z80_L),Y                       
            STA z80_H
            STX z80_L                           
 
chip_calc0
            LDY #CHIPNSFX_ENT_A                 
            LDA (z80_IX),Y
            CMP #%00010000                      ; portamento?
            BNE chip_freq                       
            LDA z80_L                           
            LDY #CHIPNSFX_ENT_L
            STA (z80_IX),Y
            LDA z80_H                           
            LDY #CHIPNSFX_ENT_H
            STA (z80_IX),Y
            JMP chip_next                       

chip_freq ; HL=FREQ.
            LDY #CHIPNSFX_FREQL                 
            LDA z80_L                           
            STA (z80_IX),Y
            TAX                                 
            LDY #CHIPNSFX_FREQH                 
            LDA z80_H
            STA (z80_IX),Y
            ASL z80_C                                                   
            LDA z80_C
            JSR writepsg                        
            INC z80_C                           
            LDX z80_H                           
            LDA z80_C
            JSR writepsg                                                
            LSR z80_C                           ; sra c [=LSR OK, bit7=0]

chip_done ; [HL=FREQ.]
            LDY #CHIPNSFX_CAMPL                 
            LDA (z80_IX),Y
            LSR                                 
            LSR                                 
            LSR                                 
            LSR                                 
            
chip_exit ; A=AMPL.(0..15)[,HL=FREQ.]
            TAX                                 
            CLC                                 
            LDA z80_IX
            ADC #<CHIPNSFX_BYTES
            STA z80_IX
            LDA z80_IX+1
            ADC #>CHIPNSFX_BYTES
            STA z80_IX+1
            LDA z80_C                           
            ORA #%00001000
            JMP writepsg                        

chip_funcs ; patch 20180507: AS80 workaround
TableFuncL !byte <chip_func0,<chip_func1,<chip_func2,<chip_func3,<chip_func4,<chip_func5,<chip_func6,<chip_func7,<chip_func8,<chip_func9,<chip_funca,<chip_funcb,<chip_funcc,<chip_funcd,<chip_funce,<chip_funcf
TableFuncH !byte >chip_func0,>chip_func1,>chip_func2,>chip_func3,>chip_func4,>chip_func5,>chip_func6,>chip_func7,>chip_func8,>chip_func9,>chip_funca,>chip_funcb,>chip_funcc,>chip_funcd,>chip_funce,>chip_funcf

chip_func1 ; $00F1: RETURN
            LDY #CHIPNSFX_BACKL                 
            LDA (z80_IX),Y
            STA z80_E
            LDY #CHIPNSFX_BACKH                 
            LDA (z80_IX),Y
            STA z80_D
            RTS                                 

chip_func2 ; $00F2: LONG CALL
            LDY #00                             
            LDA (z80_E),Y
            STA z80_L
            INC z80_E                           
            BNE +
            INC z80_D
+           LDA (z80_E),Y
            STA z80_H                           
        
chip_func2_ 
            INC z80_E                           
            BNE +
            INC z80_D
+           LDA z80_E
            LDY #CHIPNSFX_BACKL                 
            STA (z80_IX),Y
            LDA z80_D
            LDY #CHIPNSFX_BACKH                 
            STA (z80_IX),Y
            CLC                                 
            LDA z80_E
            ADC z80_L
            STA z80_E
            LDA z80_D
            ADC z80_H                           
            STA z80_D
            RTS                                 

chip_func3 ; $00F3: SHORT CALL
            LDY #00                             
            STY z80_H                           
            LDA (z80_E),Y                       
            STA z80_L
            JMP chip_func2_
 
chip_func5 ; $00F5: SET TEMPO
            LDY #00
            LDA (z80_E),Y                       
            INC z80_E                           
            BNE +
            INC z80_D
+           LDY #CHIPNSFX_NTIME                 
            STA (z80_IX),Y
            LDY #CHIPNSFX_CTIME                 
            STA (z80_IX),Y
            RTS                                 

chip_func7 ; $00F7: ADD TRANS
            LDY #00
            LDA (z80_E),Y                       
            LDY #CHIPNSFX_NNOTE
            CLC
            ADC (z80_IX),Y                      
            JMP chip_func6_+2                    

chip_func6 ; $00F6: SET TRANS
            LDY #00
            LDA (z80_E),Y                       
chip_func6_
            LDY #CHIPNSFX_NNOTE
            STA (z80_IX),Y                      

chip_func4 ; $00F4* (UNLOOPED)
            INC z80_E                           
            BNE +
            INC z80_D
+           RTS                                 

chip_funcd ; $00FD: SET VIBRATO
            LDA #$10
            STA z80_L                           
            JMP chip_funcc_                     

chip_funcc ; $00FC: SET ARPEGGIO
            LDA #00                             
            STA z80_L
chip_funcc_
            LDY #00
            LDA (z80_E),Y                      
            STA z80_A
            BEQ +                               
            LDA z80_L                           ; 00: NOTHING/10: ARPEGGIO; 01: PORTAMENTO/11: VIBRATO
            ORA #%00100000
            STA z80_L
+           LDA z80_A          
            AND #$0F                            
            LDY #CHIPNSFX_ENT_L                
            STA (z80_IX),Y
            LDY #00
            LDA (z80_E),Y                       
            LSR                                 
            LSR                                 
            LSR                                 
            LSR                               
            LDY #CHIPNSFX_ENT_H                 
            STA (z80_IX),Y
            LDA z80_L
            LDY #CHIPNSFX_ENT_A                 
            STA (z80_IX),Y
            INC z80_E                           
            BNE +
            INC z80_D
+           RTS                                 

chip_funce ; $00FE: SET AMPL. ENV.
            LDY #00
            LDA (z80_E),Y                       
            INC z80_E                           
            BNE +
            INC z80_D
+           LDY #CHIPNSFX_ENV_A                 
            STA (z80_IX),Y
            RTS                                 

chip_func9 ; $00F9: ADD AMPL.
            LDY #00
            LDA (z80_E),Y                       
            STA z80_L                           
            LDY #CHIPNSFX_NAMPL                 
            LDA (z80_IX),Y
            JSR chip_addsubl                    
            JMP chip_func8_                     

chip_func8 ; $00F8: SET AMPL.
            LDY #00
            LDA (z80_E),Y                       
chip_func8_
            LDY #CHIPNSFX_NAMPL                 
            STA (z80_IX),Y
            INC z80_E                          
            BNE +
            INC z80_D
+           RTS                                 

chip_funcf ; $00FF: SET NOISE ENV.
            LDY #00
            LDA (z80_E),Y                       
            INC z80_E                           
            BNE +
            INC z80_D
+           LDY #CHIPNSFX_ENV_N                 ; patch 20170913: no clashing
            STA (z80_IX),Y
            RTS                                

chip_funcb ; $00FB: ADD NOISE
            LDY #00
            LDA (z80_E),Y                       
            STA z80_L                          
            LDY #CHIPNSFX_NOISE                 
            LDA (z80_IX),Y
            JSR chip_addsubl                    
            JMP chip_funca_                     

chip_funca ; $00FA: SET NOISE
            LDY #00
            LDA (z80_E),Y                       
chip_funca_
            LDY #CHIPNSFX_NOISE                
            STA (z80_IX),Y
            INC z80_E                           
            BNE +
            INC z80_D
+           RTS                                 

chip_zf_mixer                                   
            SEC                                 
            LDY #$29                            
            LDA #%11111011                      ; AND #%11xxx111 (reset)
            LDX z80_C
-           ROL                                 
            DEX
            BPL - 
            LDX z80_A                           
            BNE +                               

chip_resmixer                     
            LDY #$09                            ; opcode for ORA
            LDA #%00000100                      ; ORA #%00XXX000 (set)
            LDX z80_C
-           ASL                                 ; at least one!
            DEX
            BPL - 

+           STY chip_bitmixer
            STA chip_bitmixer+1                 
            LDA chip_ld_mixer                   
chip_bitmixer 
            ORA #%00001000                      ; -> SET (ORA) / RES (AND)
            CMP #00                             ; cache!
chip_ld_mixer = *-1
            BNE +                               
            RTS

+           STA chip_ld_mixer                   
            TAX                                 
            LDA #07                             
            JMP writepsg                        

chip_addsubl ; unsigned ADD L with overflow control!
            CLC                                 
            ADC z80_L
            STA z80_A
            LDX z80_L                           
            BMI ++                              
            ; BIT 7 is reset => z80_L positif 
            BCS +                               
            RTS
+           LDA #$FF                            
            RTS
            ; BIT 7 is set => z80_L négatif
++          BCC +                               
            RTS
+           LDA #00                            
            RTS                                 

; ------------------------------------------------------------------------

chip_calcs ; AMSTRAD CPC/APPLEII/ORIC: 1.00MHz

   !word 3822,3608 ; the 1.00:1.78 gap almost equates 10 semitones!
   !word 3405,3214,3034,2863,2703,2551,2408,2273,2145,2025,1911,1804
   !word 1703,1607,1517,1432,1351,1276,1204,1136,1073,1012,956,902
   !word 851,804,758,716,676,638,602,568,536,506,478,451
   !word 426,402,379,358,338,319,301,284,268,253,239,225
   !word 213,201,190,179,169,159,150,142,134,127,119,113
   !word 106,100,95,89,84,80,75,71,67,63,60,56
   !word 53,50,47,45,42,40,38,36,34,32,30,28
   !word 27,25,24,22,21,20,19,18,17,16,15,14
  
; ========================================================================
; INPUT: A=REG / X=VALUE
writepsg    
            STA VIA_ORA                         ; register    
            STA VIA_ORA2

            LDA #F_SET_REG                        
            STA VIA_PCR
            LDA #F_INACTIVE                        
            STA VIA_PCR

            LDA #F_SET_REG                  
            STA VIA_PCR2
            LDA #F_INACTIVE                        
            STA VIA_PCR2

            ; seems you need to set one AY after the other - better sound on real hw (?!)

            STX VIA_ORA                         ; value
            STX VIA_ORA2

            LDA #F_WRT_DATA                        
            STA VIA_PCR
            LDA #F_INACTIVE                        
            STA VIA_PCR

            LDA #F_WRT_DATA               
            STA VIA_PCR2
            LDA #F_INACTIVE                        
            STA VIA_PCR2
            RTS
; ------------------------------------------------------------------------
chipnsfx_bss !fill CHIPNSFX_TOTAL,$00