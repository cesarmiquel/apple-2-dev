; ACME 0.96.4
; 
; [binary MAX Size: (16+16+12)*256 = 11264 bytes]
;
; MAD EFFECT 3
; GROUiK / FRENCH TOUCH
; 01/2020
;
; v0.06
;
!cpu 6502
!convtab "a2txt.bin" ; 
!sl "lbl_main.txt"

; INCLUDE
!source "lbl_sub.txt"

           *= $D000 ; ORG = $D000 (RAM Langage Card)

; =====================================
VERTBLANK   = $C019
FLOAD       = $FC00     ; routine Fast Load XTREME - MAIN
; =====================================
; PAGE ZERO
bRefresh    = $01   ; byte REFRESH RATE ($00/50Hz | $01/60Hz)
bSLOT       = $02   ; numero SLOT * 0x10
IntL        = $03   ; L value for INT delay
IntH        = $04   ; H value for INT delay

; FAST LOAD
PISDEP      = $0A   ; PISTE DE DEPART
SECDEP      = $0B   ; SECTEUR DE DEPART
BUFFER      = $0C   ; Buffer LOW+HIGH ; + $0D
TOTSEC      = $0E   ; TOTAL DES SECTEURS A CHARGER
CURTRK1     = $0F   ; piste de depart DRIVE 1 - A INITIALISER A ZERO pour le premier appel !

save_A      = $30
save_X      = $31
save_Y      = $32
bMark       = $33

; decompLZ4
src1        = $40   ; +$41
src2        = $42   ; +$43
dest        = $44   ; +$45
lenL        = $46
lenH        = $47
token       = $48

; PLAYER YM/AY
; ------
nREG0		= $80
vREG0		= $81
dREG0		= $82	; +$83
nREG1		= $84
vREG1		= $85
dREG1		= $86	; +$87
nREG2		= $88
vREG2		= $89
dREG2		= $8A	; +$8B
nREG3		= $8C
vREG3		= $8D
dREG3		= $8E	; +$8F
nREG4		= $90
vREG4		= $91 
dREG4		= $92	; +$93
nREG5		= $94
vREG5		= $95 
dREG5		= $96	; +$97
nREG6		= $98
vREG6		= $99
dREG6		= $9A	; +$9B
nREG7		= $9C
vREG7		= $9D
dREG7		= $9E	; +$9F
nREG8		= $A0
vREG8		= $A1
dREG8		= $A2	; +$A3
nREG9		= $A4
vREG9		= $A5
dREG9		= $A6	; +$A7
nREGA		= $A8
vREGA		= $A9 
dREGA		= $AA	; +$AB
nREGB		= $AC
vREGB		= $AD 
dREGB		= $AE	; +$AF
nREGD		= $B0
vREGD		= $B1
dREGD		= $B2	; +$B3

dTiming     = $B4   ; +$B5
; =============================================================================
MAIN
!zone
            STA $C000           ; 80STOREOFF
            STA $C008           ; zero Page = Main (+ $FXXX MAIN)
            LDA #$00            
            STA SECDEP
            STA BUFFER
            ; loading MUSIC -> $6000(M) (COMP)
            LDA #$04
            STA PISDEP          ; piste 
            LDA #$60            ; chargement
            STA BUFFER+1        
            LDA #06
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; decomp MUSIC
            STA $C005           ; write AUX Memory
            LDA #<($6000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($6000+16)
            STA src2+1
            LDA #<($6000)
            STA dest            
            LDA #>($6000)
            STA dest+1
            JSR DECOMPLZ4
            STA $C004           ; back to WRITE MAIN Memory
            LDA #02             ; patch DECOMP routine
            STA PATCHDECOMP1+1  ; -> Main memory use only from now
            ; loading HIRES -> $A000(M) (COMP)
            LDA #$05
            STA PISDEP          ; piste 
            LDA #$A0            ; chargement
            STA BUFFER+1        
            LDA #$0E            
            STA TOTSEC      
            JSR FLOAD           ; chargement
            ; loading SUB            
            LDA #$07
            STA PISDEP          ; piste 
            LDA #$60            ; chargement
            STA BUFFER+1                    
            LDA #62
            STA TOTSEC      
            JSR FLOAD           ; chargement rapide

; Some inits
            ;
            LDA $C057           ; hires
            LDA $C052           ; fullscreen
            ; ------------------------------
            LDA #<PBLUE_P
            STA T_COLOR_P
            LDA #>PBLUE_P
            STA T_COLOR_P+1
            LDA #<PBLUE_S
            STA T_COLOR_S
            LDA #>PBLUE_S
            STA T_COLOR_S+1
            LDA #00
            STA VALX1
            STA VALY2
            LDA #128
            STA VALX2
            LDA #64
            STA VALY1
            LDA #$01
            STA VALADDX1
            STA VALADDX2
            LDA #$02
            STA VALADDY1
            LDA #$FC
            STA VALADDY2
; =============================================================================
Init_MB     ; init Mockingboard             
!zone
            ; init MB (6522/AY1) / (6522/AY2)
            LDA #$FF
            STA $C403          ; DDRA1
            STA $C483
            LDA #$07
            STA $C402          ; DDRB1
            STA $C482
            ; ---------
            ; clean REGISTER AY1 / AY2
            LDA #$00
            STA $C400
            STA $C480
            LDA #$04
            STA $C400
            STA $C480
            ; ---------
            LDX #(13*4-1)
.b1			LDA TableREG,X
			STA nREG0,X
			DEX
			BPL .b1
            LDA #<($1000)
            STA dTiming
            LDA #>($1000)
            STA dTiming+1
; -------------------------------------
Init_INT    ; init interrupt
!zone       
            ; pour IIe 
            LDA #<INT_ROUTP
            STA $FFFE       
            LDA #>INT_ROUTP
            STA $FFFF
 
            SEI                 ; inhib
        
            ; préparation interruption - TIMER 1 6522 
            LDA #%01000000      ; continuous interrupt / PB7 disabled
            STA $C40B         ; Auxiliary Control Register

            LDA #%11000000      ; 
            STA $C40D           ; interrupt flag register   (Time Out of Timer 1/Int)
            STA $C40E           ; interrupt Enable register (Timer 1 + Set)
; =================================================================================================
!align 255,00       ; align here to avoid syncloop crossing page 
            ; PRECISE VBL detection - PAL/NTSC
SYNC
-           LDA VERTBLANK         
            BMI -                       ; wait fin display courant                                            
-           LDA VERTBLANK         
            BPL -                       ; wait fin VBL courant 

            ; Debut DISPLAY     
            LDA $EA                     ; 3

           ; 20279
-           LDY #255
            JSR WAIT65                  ; 255*65 = 16575
            LDY bRefresh                ; 56 (PAL) / 06 (NTSC)
            JSR WAIT65ZP                ; 56*65 = 3640 (PAL)
                                        ; = 20215

            LDY #00
            JSR WAIT57                  ; 57

            LDA VERTBLANK               ; 4 (lecture au 4ème cycle)
            BMI -                       ; 3
                                        ; = 20215+57+4+3 = 20279
            
            ; ici synchro précise => DEBUT DISPLAY
; -----------------------------------------------------------------
; WARNING: DISPLAY detected (VERTBLANK <0) from cycle #52 of last line (#311) of VBL
; so BMI not taken (LDA VERTBLANK occurs at cycle #51 of line 311)
                                                                            ; 2 cycles already passed during DISPLAY (bmi not taken)          
; line 311 / cycle 54
;                                       
            NOP : NOP : NOP : NOP  : LDA $EA                                ; +11     
;                                                                           ; = 65
; line 0 (display) / cycle 0

            ; on doit attendre 191+70+50=311 lignes pour revenir cycle 0 dernière ligne VBL (ou 261 si NTSC)
            LDY #255
            JSR WAIT65
            LDY bRefresh                ; 255+56=311 (PAL) / 255+06=261 (NTSC)
            JSR WAIT65ZP
            LDY #21+1                   ; + (6*8) + 1
            JSR WAIT65
; =================================================================================================          
            ; ici synchro précise => line #47 VBL cycle 0
            LDX IntL                                                        ; 3
            LDY IntH                                                        ; 3           
            STX $C404                   ; T1C_1-Lower                       ; 4
            STY $C405                   ; T1C_1-High                        ; 4 (counter launched at the last cycle of STY)
                                        ; -> writing launch countdown       ; = 14
; =================================================================================================
STORYBOARD
!zone

            CLI             ; music!
.step1      ; TEXT/FT Presents/
            ; display TEXTLINE1 -----------------------------------------------
            LDX #21
-           LDA TextLine1,X
            STA $5A8+9,X
            DEX
            BPL -
            ; -----------------------------------------------------------------                                 
            ; decomp HIRES x 2 -> 2000M
            LDA #<($A000+16)    ; shunte LZ4 header
            STA src2
            LDA #>($A000+16)
            STA src2+1
            LDA #<($2000)
            STA dest            
            LDA #>($2000)
            STA dest+1
            JSR DECOMPLZ4
            ; decomp TIMING -> 1000M
            LDA #<(TIMING+16)    ; shunte LZ4 header
            STA src2
            LDA #>(TIMING+16)
            STA src2+1
            LDA #<($1000)
            STA dest            
            LDA #>($1000)
            STA dest+1
            JSR DECOMPLZ4
            ; loop
.loop1      LDA bMark                                    
            BEQ .loop1
            DEC bMark       ; reset

.step2      ; HIRES/TITLE SCREEN PAGE1                  ; timing = $100                     
            LDA $C050           ; GFX
            LDA $C054
            ; decomp LORES 1 
            LDA #<(LORES+16)    ; shunte LZ4 header
            STA src2
            LDA #>(LORES+16)
            STA src2+1
            LDA #<($400)
            STA dest            
            LDA #>($400)
            STA dest+1
            JSR DECOMPLZ4
            ; loop
.loop2      LDA bMark                                    
            BEQ .loop2
            DEC bMark       ; reset

.step3      ; HIRES/TITLE SCREEN PAGE2                  ; timing = $200
            LDA $C055       ; page 2
            ; copy LORES page1->page2 
            LDY #00
            LDX #04
.mod1       LDA $400,Y
.mod2       STA $800,Y
            INY
            BNE .mod1
            INC .mod1+2
            INC .mod2+2
            DEX
            BNE .mod1
            ; loop
.loop3      LDA bMark                                    
            BEQ .loop3
            DEC bMark
            ; ---------------------------------------------
.step4      ; LORES/SYNC - PHASE 1 => BLUE PRECALC1     ; timing = $300
            LDA $C056       ; lores
            LDA $C054       ; page1
            LDA #<INT_ROUTM
            STA $FFFE       
            LDA #>INT_ROUTM
            STA $FFFF
            ; loop
.loop4      LDA bMark
            BEQ .loop4
            DEC bMark

.step5      ; LORES/SYNC - PHASE 2 => GREEN PRECALC2    ; timing = $400
            LDA #<PGREEN_P
            STA T_COLOR_P
            LDA #>PGREEN_P
            STA T_COLOR_P+1
            LDA #<PGREEN_S
            STA T_COLOR_S
            LDA #>PGREEN_S
            STA T_COLOR_S+1
            LDA #<PRECALC2
            STA MODPRECALC+1
            LDA #>PRECALC2
            STA MODPRECALC+2
            LDA #00
            STA VALX1
            STA VALX2 
            STA VALY1
            STA VALY2
            LDA #$FF
            STA VALADDX1
            STA VALADDX2
            STA VALADDY1
            LDA #$01
            STA VALADDY2
.loop5      LDA bMark
            BEQ .loop5
            DEC bMark
.step6      ; LORES/SYNC - PHASE 2 => RED PRECALC2      ; timing = $440
            LDA #<PRED_P
            STA T_COLOR_P
            LDA #>PRED_P
            STA T_COLOR_P+1
            LDA #<PRED_S
            STA T_COLOR_S
            LDA #>PRED_S
            STA T_COLOR_S+1
.loop6      LDA bMark
            BEQ .loop6
            DEC bMark
.step7      ; LORES/SYNC - PHASE 2 => N&B PRECALC2   ; timing = $480
            LDA #<PNB_P
            STA T_COLOR_P
            LDA #>PNB_P
            STA T_COLOR_P+1
            LDA #<PNB_S
            STA T_COLOR_S
            LDA #>PNB_S
            STA T_COLOR_S+1
.loop7      LDA bMark
            BEQ .loop7
            DEC bMark
.step8      ; LORES/SYNC - PHASE 2 => YELLOW PRECALC2      ; timing = $4C0
            LDA #<PYEL_P
            STA T_COLOR_P
            LDA #>PYEL_P
            STA T_COLOR_P+1
            LDA #<PYEL_S
            STA T_COLOR_S
            LDA #>PYEL_S
            STA T_COLOR_S+1
.loop8      LDA bMark
            BEQ .loop8
            DEC bMark
.step9      ; LORES/SYNC - PHASE 3 => MULTIA PRECALC1  (-)  ; timing = $500
            LDA #<PMULTIA_P
            STA T_COLOR_P
            LDA #>PMULTIA_P
            STA T_COLOR_P+1
            LDA #<PMULTIA_S
            STA T_COLOR_S
            LDA #>PMULTIA_S
            STA T_COLOR_S+1
            LDA #<PRECALC1
            STA MODPRECALC+1
            LDA #>PRECALC1
            STA MODPRECALC+2
            LDA #$02
            STA VALADDX1
            LDA #$01
            STA VALADDX2
            LDA #$FF
            STA VALADDY1
            STA VALADDY2
.loop9      LDA bMark
            BEQ .loop9
            DEC bMark

.step10     ; LORES/SYNC - PHASE 3 => MULTIA PRECALC1 (+)   ; timing = $540
            LDA #$02
            STA VALADDX1
            LDA #$01
            STA VALADDX2
            STA VALADDY1
            LDA #$FF
            STA VALADDY2
.loop10     LDA bMark
            BEQ .loop10
            DEC bMark
.step11     ; LORES/SYNC - PHASE 3 => MULTIA PRECALC1 (-)   ; timing = $580
            LDA #$FE
            STA VALADDX1
            LDA #$FF
            STA VALADDX2
            STA VALADDY2
            LDA #$01
            STA VALADDY1            
.loop11     LDA bMark
            BEQ .loop11
            DEC bMark
.step12     ; LORES/SYNC - PHASE 3 => MULTIA PRECALC1 (+)   ; timing = $5C0
            LDA #$02
            STA VALADDX1
            LDA #$FF
            STA VALADDX2
            STA VALADDY2
            LDA #$01
            STA VALADDY1
.loop12     LDA bMark
            BEQ .loop12
            DEC bMark
.step13     ; LORES/SYNC - PHASE 4 => MULTI2 PRECALC2   ; timing = $600
            LDA #<PMULTI2_P
            STA T_COLOR_P
            LDA #>PMULTI2_P
            STA T_COLOR_P+1
            LDA #<PMULTI2_S
            STA T_COLOR_S
            LDA #>PMULTI2_S
            STA T_COLOR_S+1
            LDA #<PRECALC2
            STA MODPRECALC+1
            LDA #>PRECALC2
            STA MODPRECALC+2
            LDA #40
            STA VALX1
            LDA #70
            STA VALX2
            LDA #80 
            STA VALY1
            LDA #120
            STA VALY2
            LDA #$FE
            STA VALADDX1
            LDA #$FF
            STA VALADDX2
            LDA #$00
            STA VALADDY1
            STA VALADDY2
.loop13     LDA bMark
            BEQ .loop13
            DEC bMark
.step14     ; LORES/SYNC - PHASE 5 => MULTI1 PRECALC1   ; timing = $700
            LDA #<PMULTI1_P
            STA T_COLOR_P
            LDA #>PMULTI1_P
            STA T_COLOR_P+1
            LDA #<PMULTI1_S
            STA T_COLOR_S
            LDA #>PMULTI1_S
            STA T_COLOR_S+1
            LDA #<PRECALC1
            STA MODPRECALC+1
            LDA #>PRECALC1
            STA MODPRECALC+2
            LDA #00
            STA VALX1
            STA VALX2
            STA VALY1
            STA VALY2
            LDA #$02
            STA VALADDX1
            LDA #$FF
            STA VALADDX2
            LDA #$01
            STA VALADDY1
            LDA #$FF
            STA VALADDY2
.loop14     LDA bMark
            BEQ .loop14
            DEC bMark
            ; ---------------------------------------------
.end        LDA #<INT_ROUTP
            STA $FFFE       
            LDA #>INT_ROUTP
            STA $FFFF

            ; display TEXT de FIN
            LDX #39
.loop
            LDA L00,X
            STA $400,X
            LDA L01,X
            STA $480,X
            LDA L02,X
            STA $500,X
            LDA L03,X
            STA $580,X
            LDA L04,X
            STA $600,X
            LDA L05,X
            STA $680,X
            LDA L06,X
            STA $700,X
            LDA L07,X
            STA $780,X
            LDA L08,X
            STA $428,X
            LDA L09,X
            STA $4A8,X
            LDA L10,X
            STA $528,X
            LDA L11,X
            STA $5A8,X
            LDA L12,X
            STA $628,X
            LDA L13,X
            STA $6A8,X
            LDA L14,X
            STA $728,X
            LDA L15,X
            STA $7A8,X
            LDA L16,X
            STA $450,X
            LDA L17,X
            STA $4D0,X
            LDA L18,X
            STA $550,X
            LDA L19,X
            STA $5D0,X
            LDA L20,X
            STA $650,X
            LDA L21,X
            STA $6D0,X
            LDA L22,X
            STA $750,X
            LDA L23,X
            STA $7D0,X
            DEX
            BMI +
            JMP .loop
+
            LDA $C051
            LDA $C054

.loopend    LDA bMark
            BEQ .loopend
            DEC bMark

STOPINT     LDA #%01000000
            STA $C40E           ; $CX0E => VIA_IER
            ; clean REGISTER AY1 / AY2 => FAST MUTE!
            LDA #$00
            STA $C400
            STA $C480
            LDA #$04
            STA $C400
            STA $C480
            ; ---------

END         JMP END
; =============================================================================
INT_ROUTP   ; previous INT ROUTINE
!zone        
            STA save_A 
            STX save_X 
            STY save_Y                 
            
            JSR PLAYER_YM       ; music! (one tick)                         
           
            BIT $C404           ; int again (6522)
            LDA save_A 
            LDX save_X 
            LDY save_Y 
		    RTI					; sortie INT
; =============================================================================
INT_ROUTM   ; main INT ROUTINE
!zone        
            STA save_A 
            STY save_Y 
MODPRECALC  JSR PRECALC1                                   
            JSR PLAYER_YM       ; music! (one tick)              

            BIT $C404           ; int again (6522)
            LDY save_Y
            LDA save_A 
		    RTI					; sortie INT
; =============================================================================
DECOMPLZ4
!zone
; routine de décompression LZ4
; code: XXL and FOX (from Atari Scene)
; small modification: FT

; init routine
					LDY #0
					STY lenH
					STY lenL	
; -------------------------------------
; décomp LZ4 routine
; -------------------------------------
.BP
             		jsr   	.GET_BYTE                  
                  	sta    	token
               		lsr
               		lsr
               		lsr
               		lsr
                  	beq    	.read_offset                     ; there is no literal
                  	cmp    	#$0f
                  	jsr    	.getLength
                  	
.b_literals         jsr    	.GET_BYTE
                  	jsr    	.store
                  	bne    	.b_literals
                  	
.read_offset       	jsr    	.GET_BYTE
                  	tax
                  	sec
                  	eor    	#$ff
                  	adc    	dest
                  	sta    	src1
                  	txa
                  	php							
                  	jsr    	.GET_BYTE
                  	plp
                  	bne    	.not_done
                  	tax
                  	beq    	.unlz4_done
.not_done          	eor    	#$ff
                  	adc    	dest+1
                  	sta    	src1+1
                  	; c=1
		            lda    	token
                  	and    	#$0f
                  	adc    	#$03                            ; 3+1=4
                  	cmp    	#$13
                  	jsr    	.getLength

; modification: switch avant et après le LDA
.b1                 
PATCHDECOMP1        STA $C003           ; read AUX (pour la relecture des data déjà décompressées)
                    lda     (src1),Y
PATCHDECOMP2        STA $C002           ; on repasse en mode par default
                    
                  	INC 	src1
                  	BNE 	.s1
                  	INC 	src1+1
.s1                 jsr    	.store
                  	bne    	.b1
                  	jmp		.BP                  

.store             	sta    	(dest),Y
                  	INC		dest
                  	BNE 	.s2
 					INC 	dest+1                 	
.s2                 dec    	lenL
                  	bne    	.unlz4_done
                  	dec    	lenH
.unlz4_done        	rts

.getLength_next    	jsr    	.GET_BYTE
                  	tax
                  	clc
	                adc    	lenL
                  	bcc    	.s3
                  	inc    	lenH
.s3   	            inx

.getLength         	sta    	lenL
                  	beq    	.getLength_next
                  	tax
                  	beq    	.s4
                  	inc    	lenH
.s4 	            rts

		
.GET_BYTE			LDA		(src2),Y
					INC 	src2		
					BEQ 	.s5
					RTS					
.s5					INC 	src2+1			
					RTS
; =============================================================================
PLAYER_YM					
!zone
		STA $C003			; read AUX Memory

		LDY #00				; 	
.r0		
		; REGISTRE 0
		TYA					; registre 0
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG0
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG0
		BNE .r1
		LDA (dREG0),Y
		STA nREG0
		INY
		LDA (dREG0),Y
		STA vREG0
		DEY
		LDA dREG0   
        CLC         
        ADC #02     
        STA dREG0   
        BCC .r1       
        INC dREG0+1 
        
.r1		
		; REGISTRE 1
		LDA #01				; registre 1
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG1		    ; value
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG1
		BNE .r2
		LDA (dREG1),Y
		STA nREG1
		INY
		LDA (dREG1),Y
		STA vREG1
		DEY
		LDA dREG1   
        CLC         
        ADC #02     
        STA dREG1   
        BCC .r2     
        INC dREG1+1 
		
.r2		
		; REGISTRE 2
		LDA #02				; registre 2
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG2			;
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG2
		BNE .r3
		LDA (dREG2),Y
		STA nREG2
		INY
		LDA (dREG2),Y
		STA vREG2
		DEY
		LDA dREG2   
        CLC         
        ADC #02     
        STA dREG2   
        BCC .r3     
        INC dREG2+1 

.r3
		; REGISTRE 3
		LDA #03				; registre 3
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG3
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG3
		BNE .r4
		LDA (dREG3),Y
		STA nREG3
		INY
		LDA (dREG3),Y
		STA vREG3
		DEY
		LDA dREG3   
        CLC         
        ADC #02     
        STA dREG3   
        BCC .r4     
        INC dREG3+1 

.r4
		; REGISTRE 4
		LDA #04				; registre 4
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG4
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive
		
		DEC nREG4
		BNE .r5
		LDA (dREG4),Y
		STA nREG4
		INY
		LDA (dREG4),Y
		STA vREG4
		DEY
		LDA dREG4   
        CLC         
        ADC #02     
        STA dREG4   
        BCC .r5     
        INC dREG4+1 

.r5
		; REGISTRE 5
		LDA #05				; registre 5
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG5
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive
		
		DEC nREG5
		BNE .r6
		LDA (dREG5),Y
		STA nREG5
		INY
		LDA (dREG5),Y
		STA vREG5
		DEY
		LDA dREG5   
        CLC         
        ADC #02     
        STA dREG5   
        BCC .r6     
        INC dREG5+1 

.r6
		; REGISTRE 6
		LDA #06				; registre 6
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG6
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG6
		BNE .r7
		LDA (dREG6),Y
		STA nREG6
		INY
		LDA (dREG6),Y
		STA vREG6
		DEY
		LDA dREG6   
        CLC         
        ADC #02     
        STA dREG6   
        BCC .r7     
        INC dREG6+1 

.r7
		; REGISTRE 7
		LDA #07				; registre 7
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG7
		AND #%00011011		; AB_NOTC
		STA $C401   		; ORA1 (data)
		LDA vREG7
		AND #%00110110		; NOTA_BC
		STA $C481   		; ORA1 (data)
		LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG7
		BNE .r8
		LDA (dREG7),Y
		STA nREG7
		INY
		LDA (dREG7),Y
		STA vREG7
		DEY
		LDA dREG7   
        CLC         
        ADC #02     
        STA dREG7   
        BCC .r8     
        INC dREG7+1 

.r8
		; REGISTRE 8
		LDA #08				; registre 8
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG8
		STA $C401   		; ORA1 (data)
		LDA #00             ; 0 à droite pour VOL A
		STA $C481   		; ORA1 (data)
		LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREG8
		BNE .r9
		LDA (dREG8),Y
		STA nREG8
		INY
		LDA (dREG8),Y
		STA vREG8
		DEY
		LDA dREG8   
        CLC         
        ADC #02     
        STA dREG8   
        BCC .r9     
        INC dREG8+1 

.r9
		; REGISTRE 9
		LDA #09				; registre 9
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREG9
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
			
		DEC nREG9
		BNE .ra
		LDA (dREG9),Y
		STA nREG9
		INY
		LDA (dREG9),Y
		STA vREG9
		DEY
		LDA dREG9   
        CLC         
        ADC #02     
        STA dREG9   
        BCC .ra     
        INC dREG9+1 

.ra
		; REGISTRE 10
		LDA #10				; registre 10
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA #00				; 0 à gauche pour VOL C 
		STA $C401   		; ORA1 (data)
		LDA vREGA			; 
		STA $C481   		; ORA1 (data)
		LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREGA
		BNE .rb
		LDA (dREGA),Y
		STA nREGA
		INY
		LDA (dREGA),Y
		STA vREGA
		DEY
		LDA dREGA   
        CLC         
        ADC #02     
        STA dREGA   
        BCC .rb     
        INC dREGA+1 

.rb
		; REGISTRE 11
		LDA #11				; registre 11
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
		LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREGB			; 
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
		LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
		DEC nREGB
		BNE .rd
		LDA (dREGB),Y
		STA nREGB
		INY
		LDA (dREGB),Y
		STA vREGB
		DEY
		LDA dREGB   
        CLC         
        ADC #02     
        STA dREGB   
        BCC .rd     
        INC dREGB+1 

.rd
		; REGISTRE 13		; pas oublier de shunter si = $FF
		LDA vREGD
		CMP #$FF
		BEQ .rdb
		
		LDA #13				; registre 13
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
		LDA #$07			; Set fct "Set PSG Reg #"
		STA $C400   		; ORB1 (fct)
		LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
		STA $C480   		; Set fct "Set PSG Reg #"
        STX $C480   		; Set fct "Inactive"

		LDA vREGD			; on lit la valeur
		STA $C401   		; ORA1 (data)
		STA $C481   		; ORA1 (data)
		LDA #$06			; Set fct "Write DATA"
		STA $C400   		; ORB1 (fct)
        LDX #$04			; Set fct "Inactive"
		STX $C400   		; ORB1 (fct)
        STA $C480   		; Set fct "Write DATA"
        STX $C480   		; Set fct "Inactive"
		
.rdb
		DEC nREGD
		BNE .fin
		LDA (dREGD),Y
		STA nREGD
		INY
		LDA (dREGD),Y
		STA vREGD
		LDA dREGD   
        CLC         
        ADC #02     
        STA dREGD   
        BCC .fin     
        INC dREGD+1 
		
.fin	STA $C002			; read MAIN Memory
        LDY #00
        LDA (dTiming),Y 
        STA bMark
		INC dTiming
        BNE +
        INC dTiming+1
+       RTS
; =============================================================================
!align 255,0
WAIT65              ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 8 cycles obligatoire -> LDY #xx / JSR WAIT65)
WAIT65ZP = * + 1    ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 9 cycles obligatoire -> LDY ZP / JSR WAIT65Z)
!zone           
		    LDA $EA     ; 3 (dummy)  -> on arrive sur NOP si JSR WAIT65Z
WAIT62      ; = attend 1*62 cycles exactement (JSR/RTS compris -> LDY #01 / JSR WAIT63)
            DEY			; 2					
		    BEQ .S1	    ; 3/2			
                  
.WL1 	    LDX #$0B				            
.WL2 	    DEX							
		    BNE .WL2	; 2 + (2+3)*10 + 2 + 2 = 56															
                      
		    NOP			; 2					
		    NOP			; 2					
		    DEY			; 2					
		    BNE .WL1	; (56+2+2+2+3)*(Y-2) + 56 + 2 + 2 + 2 + 2 = 65*Y - 2*65 + 64 = 65*Y - 66				

WAIT59      ; = attend 1*59 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT59)											                      
		    LDX #$08					
.WL3 	    DEX							
		    BNE .WL3	; 2 + (2+3)*7 + 2 + 2 = 41					
                							
		    NOP			; 2					
		    NOP			; 2					
		    RTS			; 6

                        ; WAIT62 = 2 + 2 + (65-66) + 41 + 2 + 2 + 6 + (8) = 62 
                        ; WAIT65 = 3 + 2 + 2 + (65*Y-66) + 41 + 2 + 2 + 6 + (8) = 65*Y
                        ; WAIT59 = 41 + 2 + 2 + 6 + (8) = 59 					

WAIT57      ; = attend 1*57 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT57)											         
.S1	 	    NOP         ; 2
WAIT55      ; = attend 1*55 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT55)	
            LDX #08					
                      
.WL4 	    DEX							
		    BNE .WL4    ; 2 + (2+3)*7 + 2 + 2 = 41					
		    RTS         ; 6
                        ; = 49

                        ; WAIT65 = 3 + 2 + 3 + 49 + (8) = 65
                        ; WAIT62 = 2 + 3 + 49 + (8) = 62
                        ; WAIT57 = 49 + (8) = 57
                        ; WAIT55 = 47 + (8) = 55
; =============================================================================
TextLine1   !text "FRENCH TOUCH  PRESENTS"
; ------------------------------------------
;                  n   v  ofl ofh
TableREG 	!byte $ff,$00,$02,$60		; 00
			!byte $ff,$00,$0c,$63		; 01
			!byte $08,$a3,$22,$64		; 02
			!byte $48,$00,$ac,$68		; 03
			!byte $04,$00,$2e,$69		; 04
			!byte $4c,$00,$34,$71		; 05
			!byte $ff,$00,$86,$74		; 06
			!byte $04,$10,$c2,$78		; 07
			!byte $ff,$00,$68,$7d		; 08
			!byte $02,$04,$3e,$83		; 09
			!byte $04,$00,$7c,$8b		; 0A
			!byte $ff,$00,$90,$99		; 0B
			!byte $ff,$ff,$56,$9b		; 0D
; ------------------------------------------
; =============================================================================
LORES
!binary "DATA\lores.bin.lz4"
TIMING
!binary "DATA\timing.reg.lz4"
; =============================================================================
; attention à l'alignement

    
;.............0000000000111111111122222222223333333333
;.............0123456789012345678901234567890123456789 
L00 !fill 40,$20
L01 !text $20,"                                      ",$20
L02 !byte $20,$A0,$A0,$A0
    !fill 32,$20
    !byte $A0,$A0,$A0,$20
;.............0000000000111111111122222222223333333333
;.........................0123456789012345678901234567890123456789 
L03 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L04 !text $20,$A0,$A0,$A0,$20,"        MAD EFFECT  #3        ",$20,$A0,$A0,$A0,$20
L05 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L06 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L07 !text $20,$A0,$A0,$A0,$20," REAL TIME                    ",$20,$A0,$A0,$A0,$20
L08 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L09 !text $20,$A0,$A0,$A0,$20,"                       50 FPS ",$20,$A0,$A0,$A0,$20
L10 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L11 !text $20,$A0,$A0,$A0,$20," 120 COLORS                   ",$20,$A0,$A0,$A0,$20
L12 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L13 !text $20,$A0,$A0,$A0,$20,"                 STEREO SOUND ",$20,$A0,$A0,$A0,$20
L14 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L15 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L16 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L17 !text $20,$A0,$A0,$A0,$20," CODE & GFX: GROUiK           ",$20,$A0,$A0,$A0,$20
L18 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
L19 !text $20,$A0,$A0,$A0,$20,"                 MUSIC: SiRiL ",$20,$A0,$A0,$A0,$20
L20 !text $20,$A0,$A0,$A0,$20,"                              ",$20,$A0,$A0,$A0,$20
;......................0123456789012345678901234567890123456789 
L21 !byte $20,$A0,$A0,$A0
    !fill 32,$20
    !byte $A0,$A0,$A0,$20
L22 !text $20,"                                      ",$20
L23 !fill 40,$20
    
; =============================================================================
!align 255,0
PMULTI1_P  
!byte 68, 68, 68, 68, 136, 136, 136, 136, 153, 153, 153, 153, 0, 0, 0, 0, 153, 153, 153, 153, 68, 68, 68, 68, 85, 85, 85, 85, 153, 153, 153, 153, 136, 136, 136, 136, 153, 153, 153, 153, 221, 221, 221, 221, 153, 153, 153, 153, 221, 221, 221, 221, 0, 0, 0, 0, 17, 17, 17, 17, 0, 0, 0, 0
!byte 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 34, 34, 34, 34, 119, 119, 119, 119, 34, 34, 34, 34, 68, 68, 68, 68, 102, 102, 102, 102, 0, 0, 0, 0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 0, 0, 0, 0, 34, 34, 34, 34, 17, 17, 17, 17
!byte 7, 17, 17, 17, 51, 51, 51, 51, 0, 0, 0, 0, 17, 17, 17, 17, 34, 34, 34, 34, 51, 51, 51, 51, 68, 68, 68, 68, 85, 85, 85, 85, 119, 119, 119, 119, 136, 136, 136, 136, 153, 153, 153, 153, 17, 17, 17, 17, 34, 34, 34, 34, 51, 51, 51, 51, 187, 187, 187, 187, 187, 187, 187, 187
!byte 238, 238, 238, 238, 0, 0, 0, 0, 17, 17, 17, 17, 34, 34, 34, 34, 68, 68, 68, 68, 85, 85, 85, 85, 204, 204, 204, 204, 221, 221, 221, 221, 238, 238, 238, 238, 0, 0, 0, 0, 68, 68, 68, 68, 85, 85, 85, 85, 204, 204, 204, 204, 68, 68, 68, 68, 0, 0, 0, 0, 68, 68, 68, 68

PMULTI1_S  
!byte 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 170, 170, 170, 170, 221, 221, 221, 221, 221, 221, 221, 221, 255, 255, 255, 255, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 238, 238, 238, 238, 255, 255, 255, 255, 221, 221, 221, 221, 221, 221, 221, 221, 0, 0, 0, 0
!byte 238, 238, 238, 238, 204, 204, 204, 204, 238, 238, 238, 238, 238, 238, 238, 238, 204, 204, 204, 204, 204, 204, 204, 204, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 68, 68, 68, 68, 102, 102, 102, 102, 34, 34, 34, 34, 34, 34, 34, 34, 136, 136, 136, 136, 34, 34, 34, 34
!byte 17, 17, 17, 17, 51, 51, 51, 51, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 187, 187, 187, 187, 255, 255, 255, 255
!byte 255, 255, 255, 255, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 136, 136, 136, 136, 68, 68, 68, 68, 68, 68, 68, 68

PMULTI2_P
!byte 68, 68, 68, 68, 136, 136, 136, 136, 153, 153, 153, 153, 0, 0, 0, 0, 153, 153, 153, 153, 68, 68, 68, 68, 85, 85, 85, 85, 153, 153, 153, 153, 136, 136, 136, 136, 153, 153, 153, 153, 221, 221, 221, 221, 153, 153, 153, 153, 221, 221, 221, 221, 0, 0, 0, 0, 17, 17, 17, 17, 136, 136, 136, 136
!byte 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 34, 34, 34, 34, 119, 119, 119, 119, 34, 34, 34, 34, 68, 68, 68, 68, 102, 102, 102, 102, 0, 0, 0, 0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 0, 0, 0, 0, 34, 34, 34, 34, 17, 17, 17, 17
!byte 7, 17, 17, 17, 51, 51, 51, 51, 0, 0, 0, 0, 17, 17, 17, 17, 34, 34, 34, 34, 51, 51, 51, 51, 68, 68, 68, 68, 85, 85, 85, 85, 119, 119, 119, 119, 136, 136, 136, 136, 153, 153, 153, 153, 17, 17, 17, 17, 34, 34, 34, 34, 51, 51, 51, 51, 187, 187, 187, 187, 187, 187, 187, 187
!byte 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 34, 34, 34, 34, 0, 0, 0, 0, 68, 68, 68, 68, 136, 136, 136, 136, 187, 187, 187, 187, 119, 119, 119, 119, 34, 34, 34, 34, 85, 85, 85, 85, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255

PMULTI2_S  
!byte 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 170, 170, 170, 170, 221, 221, 221, 221, 221, 221, 221, 221, 255, 255, 255, 255, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 238, 238, 238, 238, 255, 255, 255, 255, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221
!byte 238, 238, 238, 238, 204, 204, 204, 204, 238, 238, 238, 238, 238, 238, 238, 238, 204, 204, 204, 204, 204, 204, 204, 204, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 68, 68, 68, 68, 102, 102, 102, 102, 34, 34, 34, 34, 34, 34, 34, 34, 136, 136, 136, 136, 34, 34, 34, 34
!byte 17, 17, 17, 17, 51, 51, 51, 51, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 187, 187, 187, 187, 255, 255, 255, 255
!byte 0, 0, 0, 0, 170, 170, 170, 170, 170, 170, 170, 170, 221, 221, 221, 221, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 238, 238, 238, 238, 221, 221, 221, 221, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
; =============================================================================
ENDMAIN