!cpu 6502
!sl "lbl_main.txt"

           *= $c00 ; ORG = $c00

; =====================================
; PAGE ZERO
BUFFER              = $00       ; 00 - 1f buffer space

FRAMECOUNTER        = $80
COUNTER1            = $82
TEMPVAR1            = $83
TEMPVAR2            = $84
ACTIVE_PATTERN      = $85       ; Pointer to current pattern
PTR                 = $8a

PATTERN_LENGTH      = 7

MAIN
!zone
            sta $C050           ; Lowres gfx
            jsr $f832           ; clear screen

            sta FRAMECOUNTER    ; init frame counter
.start
            ldx #0
            ldy #0

;
; Convert bit pattern into colors and store in buffer
;
.loopinit
            lda #4
            sta COUNTER1

            lda PATTERNBG,x     ; put bg in temp2
            sta TEMPVAR2

            lda PATTERN,x
            sta TEMPVAR1        ; put fg in temp1
            pha
            eor #$ff
            and TEMPVAR2        ; bits with 1 in tempvar2 show through
            sta TEMPVAR2
            pla

.loop
            and #%11000000
            beq .save
            cmp #%10000000
            bne +
            lda #$0f
            bne .save
+           cmp #%01000000
            bne +
            lda #$f0
            bne .save
+           lda #$ff
.save
            sta BUFFER,y

; Fill background bits that show throught

            lda TEMPVAR2
            and #%11000000
            cmp #%11000000
            bne +
            lda #$11
            bne .savebg
+           cmp #%10000000
            bne +
            lda #$01            ; both gray 4 looks good too
            bne .savebg
+           cmp #%01000000
            bne +
            lda #$10
            bne .savebg
+           lda #$00

.savebg
            ora BUFFER,y
            sta BUFFER,y

            iny

            dec COUNTER1
            beq .nextbyte

            rol TEMPVAR2
            rol TEMPVAR2

            rol TEMPVAR1
            rol TEMPVAR1

            lda TEMPVAR1
            jmp .loop

.nextbyte
            inx
            cpx #PATTERN_LENGTH
            bne .loopinit

.donefill

.blitbuffer

;-	 	    cmp $c019               ; Wait VBL
;		    bpl -
            ldy #0
;-           lda BUFFER
;            sta $400,y
;            lda BUFFER+1
;            sta $480,y
;            lda BUFFER+2
;            sta $500,y
;            lda BUFFER+3
;            sta $580,y
-            lda BUFFER+4
            sta $600+12,y
            lda BUFFER+5
            sta $680+12,y
            lda BUFFER+6
            sta $700+12,y
            lda BUFFER+7
            sta $780+12,y
            lda BUFFER+8
            sta $428+12,y
            lda BUFFER+9
            sta $4a8+12,y
            lda BUFFER+10
            sta $528+12,y
            lda BUFFER+11
            sta $5a8+12,y
            lda BUFFER+12
            sta $628+12,y
            lda BUFFER+13
            sta $6a8+12,y
            lda BUFFER+14
            sta $728+12,y
            lda BUFFER+15
            sta $7a8+12,y
            lda BUFFER+16
            sta $450+12,y
            lda BUFFER+17
            sta $4d0+12,y
            iny
            cpy #5
            bne -


;DELAY DELAY DELAY
            lda #$80
            jsr $fca8

.scroll
            lda #<PATTERN
            sta PTR
            lda #>PATTERN
            sta PTR+1
            jsr .scrollpattern

            lda FRAMECOUNTER
            and #%00000011
            bne .refresh

            lda #<PATTERNBG
            sta PTR
            lda #>PATTERNBG
            sta PTR+1
            jsr .scrollpattern

.refresh
            inc FRAMECOUNTER
            jmp .start
            rts

.scrollpattern
            ldy #0              ; scroll fgpattern
            clc
            php
-           plp
            lda (PTR),y
            ror
            sta (PTR),y
            php
            iny
            cpy #PATTERN_LENGTH
            bne -
            plp
            bcc +
            ldy #0
            lda (PTR),y
            ora #%10000000
            sta (PTR),y
+
            rts


; =============================================================================
PATTERN   !byte $80,$01,$01,$80,$0f,$f1,$01 ; Must end in $00
PATTERNBG !byte $f2,$03,$31,$73,$a0,$26,$80 ; Must end in $00
